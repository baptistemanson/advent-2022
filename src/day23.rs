//use crate::debug::display;
type Field = Vec<Vec<T>>;
type Clock = usize;
// to go faster, I could use a hashset of positions.
// it would also make the bounding box logic easier.
#[derive(Debug, Clone, PartialEq, Eq, Copy)]
enum T {
    Empty,
    Elf(usize, usize),
    Blocked(Clock),
}

pub fn pb1() {
    let mut field = parse(&INPUT);
    dance(&mut field, 10);
    assert_eq!(count_empty(&field), 3917);
}

pub fn pb2() {
    let mut field = parse(&INPUT);
    assert_eq!(dance(&mut field, 1_000), 988);
}

fn dance(field: &mut Field, round: usize) -> usize {
    let mut next = field.clone();
    for i in 0..round {
        let mut has_moved = false;
        for (x, l) in field.iter().enumerate() {
            for (y, t) in l.iter().enumerate() {
                if let T::Elf(_, _) = t {
                    let suggestion = suggests(x, y, &field, i);
                    if suggestion.is_none() {
                        next[x][y] = *t;
                        continue;
                    }
                    let (dest_x, dest_y) = suggestion.unwrap();
                    match next[dest_x][dest_y] {
                        T::Blocked(a) if a == i => { /*noop, this cell is already constested */ }
                        T::Blocked(_) => {
                            next[dest_x][dest_y] = T::Elf(x, y);
                            next[x][y] = T::Empty;
                        }
                        T::Empty => {
                            // why is it sufficient to track this to mark the end?
                            // if this cell was already constested last round,
                            // we would hit the previous match arm
                            has_moved = true;
                            next[dest_x][dest_y] = T::Elf(x, y);
                            next[x][y] = T::Empty;
                        }
                        T::Elf(e_x, e_y) => {
                            next[dest_x][dest_y] = T::Blocked(i);
                            next[e_x][e_y] = T::Elf(e_x, e_y);
                        }
                    }
                }
            }
        }
        field.clone_from_slice(&next);
        if !has_moved {
            return i + 1;
        }
    }
    round + 1
}

fn suggests(x: usize, y: usize, field: &Field, i: usize) -> Option<(usize, usize)> {
    let n = isnt_elf_or_blocked(x - 1, y, field, i);
    let nw = isnt_elf_or_blocked(x - 1, y - 1, field, i);
    let ne = isnt_elf_or_blocked(x - 1, y + 1, field, i);
    let w = isnt_elf_or_blocked(x, y - 1, field, i);
    let e = isnt_elf_or_blocked(x, y + 1, field, i);
    let s = isnt_elf_or_blocked(x + 1, y, field, i);
    let sw = isnt_elf_or_blocked(x + 1, y - 1, field, i);
    let se = isnt_elf_or_blocked(x + 1, y + 1, field, i);
    if n && nw && ne && w && e && s && sw && se {
        return None;
    }
    for a in 0..4 {
        let rule_rot = (a + i) % 4;
        if rule_rot == 0 && n && ne && nw {
            return Some((x - 1, y));
        }
        if rule_rot == 1 && s && se && sw {
            return Some((x + 1, y));
        }
        if rule_rot == 2 && w && nw && sw {
            return Some((x, y - 1));
        }
        if rule_rot == 3 && e && ne && se {
            return Some((x, y + 1));
        }
    }
    None
}

fn isnt_elf_or_blocked(x: usize, y: usize, field: &Field, i: usize) -> bool {
    if field[x][y] == T::Empty {
        true
    } else if let T::Blocked(a) = field[x][y] {
        a != i
    } else {
        false
    }
}

fn is_elf(t: &T) -> bool {
    matches!(t, T::Elf(_, _))
}

fn count_empty(field: &Field) -> i32 {
    let min_x = field.iter().position(|l| l.iter().any(is_elf)).unwrap();
    let max_x = field.len()
        - field
            .iter()
            .rev()
            .position(|l| l.iter().any(is_elf))
            .unwrap();
    let min_y = field
        .iter()
        .map(|l| l.iter().position(is_elf).unwrap_or(usize::MAX))
        .min()
        .unwrap();
    let max_y = field
        .iter()
        .map(|l| l.len() - l.iter().rev().position(is_elf).unwrap_or(l.len()))
        .max()
        .unwrap();
    let mut count = 0;
    for x in min_x..max_x {
        for y in min_y..max_y {
            match field[x][y] {
                T::Empty => count += 1,
                T::Blocked(_) => count += 1,
                _ => continue,
            }
        }
    }
    count
}

fn parse(input: &str) -> Field {
    let dim_x = input.lines().count();
    let dim_y = input.lines().next().unwrap().len();
    let margin_fact = 1; // how much larger the field needs to be.
    let mut output =
        vec![vec![T::Empty; dim_y * (2 * margin_fact + 1)]; dim_x * (2 * margin_fact + 1)];
    input.lines().enumerate().for_each(|(x, l)| {
        l.chars().enumerate().for_each(|(y, c)| {
            output[x + margin_fact * dim_x][y + margin_fact * dim_y] = match c {
                '.' => T::Empty,
                _ => T::Elf(0, 0),
            }
        })
    });
    output
}

#[allow(dead_code)]
const INPUT_TEST: &str = "\
..............
..............
.......#......
.....###.#....
...#...#.#....
....#...##....
...#.###......
...##.#.##....
....#..#......
..............
..............
..............";

#[allow(dead_code)]
const INPUT: &str = "\
.###.#.#.#..###.##.#.....#.####.####..##.#.##.#....##.###.#..####.##.#.
.###.#...######....##.#..###..#.#.##.#.######..##.#.....#...#.#.##.##..
.##....#..#...#..##.....##......#.#..#......#..#..###..#..##..#.#.##.#.
#####.###.##.#.##.#.#...##.##.#.#..####...#.#..####.#.######.###.######
#...#.#.#####....#.#.###..#####..####.#.#....###.#.####..##..###.####..
#.#.#.#####.....#....##....####.#..#...##.##..##..##..#..#...####.#..##
....#.#..####.#...#........##...##...#.##.##########...###..#####.#...#
.####.#...##.#..##....###.##..#.###.#.##..######.##.#.#.##....##..#....
..#...#...#..#####......#.....#.##..#.####.##...#####..#..###.#..##....
#..#.#.#....####...#..##..#...#..#.#####.#.##..###.#.#.#...#######.#...
.#.#.####....###...#..#.#...#.#.####..#..#........#..###....########.#.
#.##.#.##.#...#.##.###....##...####.###...#.##.##..##....#...####.#..#.
.#.#.#.#..###..#.####..######.##..#.#######...####.#.#.#.##...#.....###
#..###...##......#..#....#..#..##......#####...#.##.....#.###..#...#..#
.####...#.#....###.#.....#.##.#.....##...##.....#..#####..###.##.#.#.##
..#...#.#.#...##########..###.###....#..###....##..#.########.##.#.#.##
####..#..#.####...####..##.##.##....#..###.###.......##.......#.##...##
...#####..#.####.#.#.#.###..#..#..#.##.##..#.###.###.#...#.#.##.....#..
##..###.##.###.##.####.#.#.....##.##.#..###..####..########.###..###.##
#.#.#..#....###.#...#.#...#..###.###..#.##.##.####.##.##.##..#..###..##
#..###.....##.#####.###..##.###.#.....##.#....###..######..##.#.###...#
#.##..##.#.#.#.##.#..##..#..##..#....#..###.......###.####..##...#.#.#.
##...#..##..#.#..##.##...#.#.#..####.#..##...#.#...######....##.#...#..
#.###...#####..####..##..##.###..##.#.####..##.#.###.#.#..#......#.....
.#...#.#.###........#.#.#...#..####...#.#####.#####...#....###.##.###..
....###....####..##..###.##..##.##.#.###.##.#.#.....#.....###.##...##..
#....######.....#.#...#.#..###.....#....#..##.##.###..##....#.###...#..
#.#.#.#.#...#.#.#...#.#.....####.###.#####.#.##..###..#.#####.#......#.
.##.####...######.#.###.##.###..#.##..#.#.#....##.#.#####.#...####....#
.#.#.##..##..###.#.#....####....#......#..##..###..########...#.##.##.#
#.###.##...#....#..###..#......##..#....#.####..#.##..#.##.#.##.#...###
#..#....##.###..###..##..#...#......#..####.#.#.#######.#...#####..#..#
..#.###.#..###.###......#.####..###..#.#..#.#.....##...#..#.#.##.###...
...##.........#..###.##..#######.######....######.#####.#.#.#.#..######
###.##..###.#.####...###..#..#...#...##.#.#......#..#.###..#.#...#....#
...###....##....#.##.#...###....##.#...#..#...#.#.##..#..#..####....#.#
.#.#..#########....#.##.##..#.##..##.###..#.###..##.#..#.####.#.##.##..
##..####..###.#.....#.#.#.##...#.##....##.#.#.....##.....#..##.#.##.##.
#..#.######.#.###...#..#.#.###.##.##.#.###.....#.......####..#...###..#
.##..##.###.#.###.#######.#.#.#.##.#....#...#####....###.######..#..##.
#.####....#..#...###.....###..##...###....##.#..#..##...##..#.####..#..
..###.##.###.#.#....##.####.#.#...#.#####.####..#.#.#.###.##.###...####
##.##..#..##.....#####..####.##.#.#.##..##.#.#..##..#.##.#.#....####...
###.#.#....#...#...#.#...#.#..#.#.###.###.##..#..#..###.##..#.#...##...
...#.....#.##...##....##...##.#.#..#.##.#.#..##.####.#.##..#.......#...
#....####.#.....###.##.#.###.#####.##....#.##..#####.....#.##.##..###.#
.#..#..##.#..##.#.######.##...##...#.##..##..#.#.#..##.#....##...######
....##.##.#...#.###....##..#..#..#..#...#...####.##.########.###..##..#
###...####......#.#..#..#.##.####.#.##.#.##.#..##.#..###..####..#.#.###
..#####...#.#.....#....####.##..##.##..###...##.###..##.####.####..###.
..#.##.##...##..##.#..##.#.###...#.#..##.#.##.###.#.#.#.#.#..#..##.#..#
.#.....#..####..#...#.#..####.#####.#..###.##.###.###.#.......####.##..
.#.#####.#....#..##..#.###.####.#.....#..#.####..#.#.#....#.##.##..###.
.....#...#.#..#.#.#.#.##..####.##.##.###.#......#..#.##...####.#.#.#.#.
##...#..#..##..##..#...#.##.###....#..#..##..#.##.#.###.###.#....#.##..
#.##.##...#.....##...###.#####..###..#.#.#..#.#.....#####.###.#..##...#
.###..#.#.#...###.##...##...#..#.#.#...#.###....###......#.#.###..###.#
###..#...###...#.#.##.#..##.#.....#..##.#..#########..##.#.###.#.#.#...
.##.#.#.#.#...#...##.##..#.##..#########..#.##.###.##.####.#.##.####.##
##.#####...##.....##.....##....###...#....#...#.##.#..##.#...#.#.#...#.
##....#.#....##.##..###....####.#...######.#..##......#.####...#.#.##.#
#####.#...#.....###....#.##....#..#.##.#####.########.###.#..#.##.#..##
##..#.#..##.#.##...#...##.#####.###.####.#...##...###...##..#...###.###
#.##..#....######..#.###.....#.#.####.##..##.##.#####......#.#.###..###
.#####..####.#.##...###.....#######..######.#.##....#..##.##.##.##.#.##
...##.....#.###.####.#.###.#......##.#....#..###.....#.###.......####..
.#.########..#.#...###.#.##....#.##.####.#.##....#.###.#.####.#.#...##.
.###.#.#.#.#..#.##..#####..#######...#...#..######.....###...##.#.##.#.
.#.....##..#.#..##.#.#..#.#..##.#..#...##..######.#.########...###.#...
..###.##..#.##..#........#.#....###..#.....##.##.##..#.##..###.#...#.##
..#.####.######.#......#...###.#...##.#...###.###.#..###.#..##.#..####.";
