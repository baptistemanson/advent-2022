use itertools::Itertools;
use std::ops::{Add, Sub};
pub fn pb1() {
    let mut cave = parse(CAVE);
    let e1 = edge(0, 51, 0, 100);
    let e2 = edge(151, 51, 151, 100);
    let e3 = edge(0, 101, 0, 150);
    let e4 = edge(51, 101, 51, 150);
    let e5 = edge(100, 1, 100, 50);
    let e6 = edge(201, 1, 201, 50);
    let e7 = edge(1, 50, 50, 50);
    let e8 = edge(1, 151, 50, 151);
    let e9 = edge(51, 50, 100, 50);
    let e10 = edge(51, 101, 100, 101);
    let e11 = edge(101, 0, 150, 0);
    let e12 = edge(101, 101, 150, 101);
    let e13 = edge(151, 0, 200, 0);
    let e14 = edge(151, 51, 200, 51);
    // up down
    fold_both(&mut cave, &e1, &e2, Facing::U, Facing::U); //facing 1 -> facing after teleporting from e1 to e2.
    fold_both(&mut cave, &e3, &e4, Facing::U, Facing::U);
    fold_both(&mut cave, &e5, &e6, Facing::U, Facing::U);
    // left right
    fold_both(&mut cave, &e7, &e8, Facing::L, Facing::L);
    fold_both(&mut cave, &e9, &e10, Facing::L, Facing::L);
    fold_both(&mut cave, &e11, &e12, Facing::L, Facing::L);
    fold_both(&mut cave, &e13, &e14, Facing::L, Facing::L);
    display(&cave);
    let start = Pos { x: 1, y: 51 };
    let facing = Facing::R;
    let cmd = parse_command(CMD);
    let r = walk(start, facing, &cave, cmd);
    let final_r = r.0.x * 1_000 + r.0.y * 4 + r.1 as i32;
    assert_eq!(final_r, 1428);
}

pub fn pb2() {
    let mut cave = parse(CAVE);
    let e1 = &edge(0, 51, 0, 100);
    let e2 = &edge(151, 51, 151, 100);
    let e3 = &edge(0, 101, 0, 150);
    let e4 = &edge(51, 101, 51, 150);
    let e5 = &edge(100, 1, 100, 50);
    let e6 = &edge(201, 1, 201, 50);
    let e7 = &edge(1, 50, 50, 50);
    let e8 = &edge(50, 151, 1, 151);
    let e9 = &edge(100, 50, 51, 50); // ↑
    let e10 = &edge(51, 101, 100, 101);
    let e11 = &edge(101, 0, 150, 0);
    let e12 = &edge(150, 101, 101, 101);
    let e13 = &edge(151, 0, 200, 0);
    let e14 = &edge(151, 51, 200, 51);
    // folds cube
    let c = &mut cave;
    // corners
    fold_both(c, e5, e9, Facing::U, Facing::R);
    fold_both(c, e2, e14, Facing::D, Facing::L);
    fold_both(c, e4, e10, Facing::D, Facing::L);
    // flats
    fold_both(c, e8, e12, Facing::R, Facing::L);
    fold_both(c, e7, e11, Facing::L, Facing::R);
    // longs
    fold_both(c, e3, e6, Facing::U, Facing::U);
    fold_both(c, e1, e13, Facing::U, Facing::R);
    let start = Pos { x: 1, y: 51 };
    let facing = Facing::R;
    let cmd = parse_command(CMD);
    let r = walk(start, facing, &cave, cmd);
    let final_r = r.0.x * 1_000 + r.0.y * 4 + r.1 as i32;
    dbg!(final_r);
}

// remember to remove 1,1 from each position.
#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Copy, Clone)]
struct Pos {
    x: i32,
    y: i32,
}

#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Clone)]
enum T {
    Pit,
    Floor,
    Rock,
    Teleport((Facing, Pos, Facing), (Facing, Pos, Facing)),
    // Facing filter, pos to teleport, facing to adopt...
    // Facing filter, pos to teleport, facing to adopt...
}

#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Copy, Clone)]
enum Facing {
    R = 0,
    D = 1,
    L = 2,
    U = 3,
}

fn opposite(f: Facing) -> Facing {
    match f {
        Facing::L => Facing::R,
        Facing::R => Facing::L,
        Facing::U => Facing::D,
        Facing::D => Facing::U,
    }
}
fn clk(f: Facing) -> Facing {
    match f {
        Facing::L => Facing::U,
        Facing::R => Facing::D,
        Facing::U => Facing::R,
        Facing::D => Facing::L,
    }
}

fn counterclk(f: Facing) -> Facing {
    match f {
        Facing::L => Facing::D,
        Facing::R => Facing::U,
        Facing::U => Facing::L,
        Facing::D => Facing::R,
    }
}

fn step(f: Facing) -> Pos {
    match f {
        Facing::L => Pos { x: 0, y: -1 },
        Facing::R => Pos { x: 0, y: 1 },
        Facing::U => Pos { x: -1, y: 0 },
        Facing::D => Pos { x: 1, y: 0 },
    }
}
type Cave = Vec<Vec<T>>;

struct Edge {
    start: Pos,
    end: Pos,
}

impl Sub for Pos {
    type Output = Pos;
    fn sub(self, b: Pos) -> Self::Output {
        Pos {
            x: self.x - b.x,
            y: self.y - b.y,
        }
    }
}

impl Add for Pos {
    type Output = Pos;
    fn add(self, b: Pos) -> Self::Output {
        Pos {
            x: self.x + b.x,
            y: self.y + b.y,
        }
    }
}
impl Pos {
    fn norm(&self) -> Pos {
        Pos {
            x: self.x.signum(),
            y: self.y.signum(),
        }
    }
}

fn fold(cave: &mut Cave, e1: &Edge, e2: &Edge, facing_before: Facing, facing_after: Facing) {
    let mut cursor1 = e1.start;
    let mut cursor2 = e2.start;
    let delta1 = (e1.end - e1.start).norm();
    let delta2 = (e2.end - e2.start).norm();
    while cursor1 != e1.end {
        merge_corner(cave, cursor1, facing_before, cursor2, facing_after);
        cursor1 = cursor1 + delta1;
        cursor2 = cursor2 + delta2;
    }
    merge_corner(cave, cursor1, facing_before, cursor2, facing_after);
}

fn merge_corner(
    cave: &mut Cave,
    cursor1: Pos,
    facing_before: Facing,
    cursor2: Pos,
    facing_after: Facing,
) {
    if let T::Teleport(_, b) = cave[cursor1.x as usize][cursor1.y as usize] {
        cave[cursor1.x as usize][cursor1.y as usize] =
            T::Teleport((facing_before, cursor2, facing_after), b);
    } else {
        cave[cursor1.x as usize][cursor1.y as usize] = T::Teleport(
            (facing_before, cursor2, facing_after),
            (facing_before, cursor2, facing_after),
        );
    }
}

fn fold_both(
    cave: &mut Cave,
    e1: &Edge,
    e2: &Edge,
    facing_before_teleport: Facing,
    facing_after_teleport: Facing,
) {
    fold(cave, e1, e2, facing_before_teleport, facing_after_teleport);
    fold(
        cave,
        e2,
        e1,
        opposite(facing_after_teleport),
        opposite(facing_before_teleport),
    );
}

fn parse(input: &str) -> Cave {
    let len = input.lines().skip(1).next().unwrap().len();
    // only the second has enough meat
    input
        .lines()
        .map(|l| format!(" {:<width$} ", l, width = len)) // complete each line, and add one to the left and right
        .map(|l| {
            l.chars()
                .map(|c| match c {
                    '#' => T::Rock,
                    '.' => T::Floor,
                    ' ' => T::Pit,
                    _ => panic!("not known"),
                })
                .collect_vec()
        })
        .collect_vec()
}

fn edge(x: i32, y: i32, ex: i32, ey: i32) -> Edge {
    Edge {
        start: Pos { x, y },
        end: Pos { x: ex, y: ey },
    }
}

fn walk(mut pos: Pos, mut facing: Facing, cave: &Cave, cmds: Vec<Cmd>) -> (Pos, Facing) {
    for cmd in cmds {
        match cmd {
            Cmd::Dist(i) => {
                for _ in 0..i {
                    // check if next is a teleport, then teleport
                    let mut next_pos = pos + step(facing);
                    if let T::Teleport((f1, d1, fa1), (_, d2, fa2)) =
                        cave[next_pos.x as usize][next_pos.y as usize]
                    {
                        // phase 2 can change facing
                        facing = if facing == f1 { fa1 } else { fa2 };
                        next_pos = if facing == f1 { d1 } else { d2 } + step(facing);
                    }
                    if next_pos.x > 250 || next_pos.y > 250 || next_pos.x < 0 || next_pos.y < 0 {
                        dbg!(&cmd, pos, facing, next_pos, step(facing));
                        panic!("aoutch");
                    }
                    // check if next is not a rock
                    if cave[next_pos.x as usize][next_pos.y as usize] != T::Rock {
                        pos = next_pos;
                    }
                }
            }
            Cmd::TurnClk(f) => facing = if f { clk(facing) } else { counterclk(facing) },
        }
    }
    (pos, facing)
}

#[derive(Debug)]
enum Cmd {
    TurnClk(bool),
    Dist(i32),
}

fn parse_command(input: &str) -> Vec<Cmd> {
    let init: Vec<Cmd> = vec![];
    input.chars().fold(init, |mut acc: Vec<Cmd>, e| {
        match e {
            'R' => {
                acc.push(Cmd::TurnClk(true));
            }
            'L' => {
                acc.push(Cmd::TurnClk(false));
            }
            e => {
                let n = e.to_digit(10).unwrap() as i32;
                if let Some(Cmd::Dist(i)) = acc.last() {
                    let len = acc.len();
                    acc[len - 1] = Cmd::Dist(i * 10 + n);
                } else {
                    acc.push(Cmd::Dist(n));
                }
            }
        }
        acc
    })
}

fn display(cave: &Cave) {
    // header
    let w = cave.first().unwrap().len();
    println!(
        "  y {}",
        (0..w)
            .map(|i| format!("{:03}", i).chars().nth(0).unwrap())
            .collect::<String>()
    );
    println!(
        "    {}",
        (0..w)
            .map(|i| format!("{:03}", i).chars().nth(1).unwrap())
            .collect::<String>()
    );
    println!(
        "x   {}",
        (0..w)
            .map(|i| format!("{:03}", i).chars().nth(2).unwrap())
            .collect::<String>()
    );
    // cave
    cave.iter().enumerate().for_each(|(i, l)| {
        println!(
            "{:0width$} {}",
            i,
            l.iter().map(|f| f.to_char()).collect::<String>(),
            width = 3,
        )
    });
}

impl T {
    // This trait requires `fmt` with this exact signature.
    fn to_char(&self) -> char {
        match self {
            T::Pit => ' ',
            T::Floor => '.',
            T::Rock => '#',
            T::Teleport((f, _, _), _) => match f {
                Facing::U => '↑',
                Facing::D => '↓',
                Facing::L => '←',
                Facing::R => '→',
            },
        }
    }
}
// #[cfg(test)]
// mod tests {
//     use super::*;

//     #[test]
//     fn test_1() {}
// }

#[allow(dead_code)]
const CAVE_CUSTOM: &str = "";

#[allow(dead_code)]
const CAVE_TEST: &str = "          
        ...#     
        .#..     
        #...     
        ....     
...#.......#     
........#...     
..#....#....     
..........#.     
        ...#.... 
        .....#.. 
        .#...... 
        ......#. 
           ";

const CMD_TEST: &str = "10R5L5R10L4R5L5";

const CMD: &str
#[allow(dead_code)]
const CAVE: &str = "  
                                                  .....................#.....#.............................#..............#............##.....#.......
                                                  .....#..................#........#.....................#.#....#.......#.#.......#........#...###....
                                                  ........#..................#..........#.......................#.........#...............#.##..#.....
                                                  .#...................#......#........#..#..#...........#.......................#..................##
                                                  ..###................#...........#.......#...........#........................#..#....#.#...........
                                                  ...#............#..........#..............#..#...#...........#.#..........#...#.....................
                                                  ..##.#............#...#.#.....#..##...............#.....##.#.#.............#.#.....##........#......
                                                  ...............##..#............#.#.............#..##........#..#...............#.....#.............
                                                  ....#........#.........###..........#........#.........................#.............#..#...........
                                                  ..#...#.................#..............#......#..............#...##......#.....................#....
                                                  ...........#...#......###.....#..#...#...............#......#.....................#......#..........
                                                  .....#.........................#.#.....#...........##.....#..............#.#.........#...........#..
                                                  ...#....#...#.......##..........#.............#...........#...........##............................
                                                  ..##........#............#........#......#....#...........#..#..#...........#.#.....................
                                                  ...#..#.......#................#......#.#.................#.........................................
                                                  #....#..#.......#............#....##.................#..............#....#.......#.#.#..............
                                                  ...............#......................#..#...................................#.#.##..#..............
                                                  ...#..........................#...#................#.....#.........................#...............#
                                                  ...#...............................#.....#........#....#.......#......##.......................##...
                                                  .........#..................#............#..................#.....#..........#...#...........#....#.
                                                  #........#...#............#..#.........................#.........#...##....#.............#........#.
                                                  ..................#.#...#......#.....................................#...........#.......#....#.....
                                                  ..............#......................................##.....#..........................##..#........
                                                  #...........#....................#.......#..................................#....#........#.........
                                                  #..#..................................#.#............................#.##...#...#....#.........#..#.
                                                  ......................#....#.....#................##...............#...#............................
                                                  ....#............#..#........#......#.#.............#.#...#.........#.#.###.........................
                                                  ..............#...........................#.....................#...................................
                                                  .#................#..#..........#..........#..........#.........#....#.....#..##....####.#..........
                                                  ..#........##...............#........#........#..#............................#........##...#.......
                                                  .........#.......#....#..............#.............#.#..................................#...........
                                                  .#.....#...#............#.......##......#..........#.........#..#........................#......#...
                                                  .......#.#...#.........................#...............#.#..........................................
                                                  .......#....#.......#................................#.................................#......#.....
                                                  .#..#................................................#.....#......#..........................#.....#
                                                  #......#...............#.......#...##......#.#.#.............#.............##..#.............##.....
                                                  ......#.......................#...#..#.#......#.......##...#...................#..............#.....
                                                  ...#.......#..................#....#.....#...#......#.................................#.......#.....
                                                  ..#......#........#...#..#....#..#..#..............................##..#....................#..#....
                                                  .#.#.......#.#.......................#..#.......#..#...#..............#..........#..................
                                                  #...........#.............#...#...........##....#...................................##..............
                                                  ..................................#...........#...................................#..............#..
                                                  ......................#....#...................#..##...............#...................#...#...#.#..
                                                  ....#............#....................#.......................................#..#...#.......##.....
                                                  ...#.......#..........##.#........#.....................#....#............#.................#..#....
                                                  ......#.........................#........##.........#................##.........#............##.###.
                                                  #...................#............#..................#.................##..#......................#..
                                                  .#......#................#..............#.................#.....#...............................#.##
                                                  ..........#........#...........#................#....##.#............##................#.#..........
                                                  .....#........................................#.......#...................#........#................
                                                  ...................................#..............
                                                  ........#.....................#.........##.##.....
                                                  ..............##................................#.
                                                  ......#....#......................................
                                                  ..#............#...............#..................
                                                  .#.......#.............#..........................
                                                  ..##................#......#..#...................
                                                  ##.....#.......#..........#...........##.........#
                                                  ..#...........#..................#......#..#......
                                                  ..........................#.#...........#.........
                                                  .....#.....#.......#.........#.......##...........
                                                  ......................#.......#......#.#..........
                                                  ..#...#......#.................#........#.........
                                                  ......#.......#..............#......#.........#...
                                                  ................#..#...#.#.....#.................#
                                                  .#........................#.....#.............#...
                                                  ......#...#.#......#......#................#......
                                                  #.......#..#......................#...............
                                                  ..................#.#................##...........
                                                  ...##.#.....##...............#..........#.........
                                                  .....#....#..#...........#.#..........#...........
                                                  #........#.......#..............#.#...#...........
                                                  .#......................#..................#......
                                                  ..........#.#...#...........#..................##.
                                                  ......#.......#.....#.............................
                                                  ........#.#.#.#.............................#.....
                                                  ............#...#......#.................#........
                                                  ..................................................
                                                  .........#...............................#...###..
                                                  ..#...........#.#.#...............................
                                                  ..........#.........#....##....#..................
                                                  ......#........#...#....#...........#.......#.....
                                                  .#..#.........#.......#....................#......
                                                  #.#.....#..............................#.....#...#
                                                  ..#....#...#......#..........#.................#..
                                                  ........#..#........#......#.......#......##......
                                                  ..#............................#..........##......
                                                  ...........#..............#...............#..#....
                                                  ......##.........#............#..........#....#...
                                                  .....#..........................#....#............
                                                  ............#.#..#......#..#......................
                                                  ..........#...#...........#...........#.......#..#
                                                  .......#.#......#.#.......#..#.......####....#....
                                                  ....#........#......##............................
                                                  ..............#....#..............................
                                                  ................#..#.........#.#..................
                                                  .....#....#........#......#...#.........#.....#.#.
                                                  .......##...........................#.........#...
                                                  #.......#............##.#..........#..............
                                                  .................#..............#......#.#..#.....
.......#....#..............#...#........#......#............................#........#.........#.#.#
.........#.......#........#...........#...........#..#......#.......................................
..#......#...#........#.##..#.................#...##......#................#...#........#........#..
..#...................#...#..#.......#....#.#......#.................#...#...#......................
....................#...............#..........#................#............................#......
..#........................#...........#...#............#..........................#................
.#..........#............................#..................#...#......................#.......#....
...#.............#...#.......#...........#...................#...........#.........#.....##....#.##.
.#....................................#.#...........#..#...#.........#....#...#.......#....#........
#...#..............#.............................#.........#...........#......................#.....
..#.....#......#.............#........#...........#...............##.....#........#.#...........#...
....#...........#.......#............#............##...#.......................................##...
...#..........................#...........#...#....#.........#.....#.#..............................
............................#...............#.......#.........#......#.......#.....#................
.#..........#..........#................#...........#...........................#............#......
............##............................................##....................#.....#.#...........
......##........................#....#..........#.......................................#...........
.#....#...................#.................##........................#...#...#...#...#...#.........
....#.......#..................#.....#.....#..............#............#......#.#....#..............
#..............#..................#..#.#.......#...........##.....................#..#....#....#...#
.....#....#..........#...#...#..#............#.............#......#........#......#.................
.........................#.....#.....#.....................................#.....#........#...#...#.
.....................................#.#.#...........#............#.#...................#.#...#.....
....#.#..#....#.......#..#...........#....#...#..............#...........#...............#.........#
#.............#.............#..#.......................##........#............#...........#...#.....
....##.#...#..............#...#...................................##.#..#...#.....#....#....#.......
...........#.#..##...............#...#..........#..#......#................#...............#........
.#...#..........#.#....##...............................#............#.....#......#.................
..........#.......#.#......##...........#..............#..#.........................#....#..#..##...
#.........#....#.......#.......#.....#..........###....#..........................#...#...#.......#.
............#..##.........#..........##..........#....................#...............#.....#......#
.#...........#.....#...........#...#....#......#.#..............#...................#....#..........
....#..........#..............................#.......#..........#.........#........................
.#...............##........#.................#...#..............#............................#....#.
....#.......#............#.#...................#..#.#.........##.......#....#...........#......#....
..........#........................#............##..#.#.#......................#......#........#....
#.............#.....................#.....#.......................#....#......#.#.##...#............
.........#............#......#.................................................................##..#
....#.....#......#...................#.........................#....................................
..............................##.............#.......#.....#..........#........#........#...........
.....#...#..........##....#.#................#.....#...........#..............##......##......##.#..
........#.............#...........................#.............##....#.#..#.....#.#...........#..#.
.............#...............#....#.#.............#...##.......#.#......................#..#..#.....
..........#...........#......#......#.............#...........#..#....##..........#.................
.......................#..##...........#..............#.......................#.....................
......#..#...................#.....................................#......##.............#.#....##..
.....##....#......#..................#.........#..#...............#.................#......#.#....#.
..#.......#.#.##......#.#........#..#.###...#...#....#...#.............................#............
#........#....#....#.#..#..#....#.........#..................#.#................................#...
..#.....................##.............#.#........#................#.....#...........#.#...#........
.......#......#........#....#..........#..........
#..................##...#.................#..#....
...#..............#...............................
#.......#......#.......................#....#.#...
..........................#........#..........#...
.........#.......#......................#........#
....#...............#....................#........
....#..................#...##.....................
.........#.................#......................
...........#.............#...#....................
.......#.....#......#..................#...#......
..........#............#..........................
..........#...#............................#......
.........#.....#......#..........#..........#.....
.#..................................#..##.........
.....#......#............##.....#..........#......
.....#......#........#.#.........#................
.............##.#..........#....................##
.........#..........#..........##..#..#..#.#......
..........#........#...#.#..#................#..#.
...#.#........#.......#...........##.............#
.................#...#.....#......................
...#..#.#.......................##....#...........
......#.........#...................#.............
..#.........#.........#...........#........##.....
................#...............#..........##...#.
............................................#.....
..#................................#....#.........
.....#........#...................#.##.......#....
........#.......................................#.
.............#...#......#.........#.......#.......
#...........#.....#...........#............#......
.............#.............#.....#................
.....#.......#....##.................#..##....#...
#....#..#.....#......#.......................#...#
.#..........................#................#..#.
....#........#...................................#
#...#......#..................#.........#.......#.
.................#..##............................
.#................#..................#.....#....#.
............#.................#.#.....#...........
.##...............#............#...............#.#
.....#...............#..#....#.....#..........##..
#............#.......#...#.#.#....................
..................##........................#.....
.#........#.#..............#.........##.....#.....
..##............#.................................
..........#...#......#.#....#.#.#..#.........#....
.............#......#...#......#.............#....
.......#..#..#....................................
  ";
